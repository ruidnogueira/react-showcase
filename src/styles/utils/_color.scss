@use 'sass:list';
@use 'sass:map';
@use 'sass:math';
@use 'sass:color';

/// Slightly lighten a color
@function tint($color, $percentage) {
  @return mix(#fff, $color, $percentage);
}

/// Slightly darken a color
@function shade($color, $percentage) {
  @return mix(#000, $color, $percentage);
}

/// Returns the luminance of `$color` as a float (between 0 and 1)
/// 1 is pure white, 0 is pure black
/// @param {Color} $color - Color
/// @return {Number}
/// @link http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef Reference
@function luminance($color) {
  $colors: (
    'red': color.red($color),
    'green': color.green($color),
    'blue': color.blue($color),
  );

  @each $name, $value in $colors {
    $adjusted: 0;
    $value: math.div($value, 255);

    @if $value < 0.03928 {
      $value: math.div($value, 12.92);
    } @else {
      $value: math.div($value + 0.055, 1.055);
      $value: math.pow($value, 2.4);
    }

    $colors: map.set($colors, $name, $value);
  }

  $red: map.get($colors, 'red') * 0.2126;
  $green: map.get($colors, 'green') * 0.7152;
  $blue: map.get($colors, 'blue') * 0.0722;

  @return $red + $green + $blue;
}

// @function contrast-ratio($fg, $bg)
// Helper: Calculate "readability" as defined by WCAG 2.1
// Adapted from: https://github.com/LeaVerou/contrast-ratio/blob/gh-pages/color.js
// Formula: http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef
// To be used in other functions or mixins — creates non-standard CSS output:
// Usage:
// .sample { color-contrast: contrast-ratio(#c00, #fff); }
// Output:
// .sample { color-contrast: 5.89; }
@function contrast-ratio($fg, $bg) {
  $luminance1: luminance($fg) + 0.05;
  $luminance2: luminance($bg) + 0.05;

  $ratio: math.div($luminance1, $luminance2);
  @if $luminance2 > $luminance1 {
    $ratio: math.div(1, $ratio);
  }

  // Round to a hundreth because 6.96 should not pass a ratio of 7.0
  $ratio: math.div(math.round($ratio * 100), 100);
  @return $ratio;
}

// @function light-or-dark($color)
// Helper: Use contrast against white or black to determine if a color is "light" or "dark"
// Adapted from: https://medium.com/dev-channel/using-sass-to-automatically-pick-text-colors-4ba7645d2796
// To be used in other functions or mixins — creates non-standard CSS output:
// Usage:
// .sample { light-or-dark: light-or-dark(#c00); }
// Output:
// .sample { light-or-dark: "light"; }
@function light-or-dark($color) {
  $light-contrast: contrast-ratio($color, #fff);
  $dark-contrast: contrast-ratio($color, #000);

  @if $light-contrast > $dark-contrast {
    // Contrast against white is higher than against black, so, this is a dark color
    @return 'dark';
  } @else {
    @return 'light';
  }
}

// Takes a color values and compares it to a list of other colors, selecting the one with the highest contrast.
// Part of the CSS Color Module Level 5
// See https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/color-contrast()
@function color-contrast($color, $light, $dark) {
  @if light-or-dark($color) == 'dark' {
    @return $light;
  } @else {
    @return $dark;
  }
}

/* TODO: comments */
